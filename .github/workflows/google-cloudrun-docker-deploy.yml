# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a commit is pushed to the "main"
# branch.
#
# To configure this workflow:
#
# 1. Enable the following Google Cloud APIs:
#
#    - Artifact Registry (artifactregistry.googleapis.com)
#    - Cloud Run (run.googleapis.com)
#    - IAM Credentials API (iamcredentials.googleapis.com)
#
#    You can learn more about enabling APIs at
#    https://support.google.com/googleapi/answer/6158841.
#
# 2. Create and configure a Workload Identity Provider for GitHub:
#    https://github.com/google-github-actions/auth#preferred-direct-workload-identity-federation.
#
#    Depending on how you authenticate, you will need to grant an IAM principal
#    permissions on Google Cloud:
#
#    - Artifact Registry Administrator (roles/artifactregistry.admin)
#    - Cloud Run Developer (roles/run.developer)
#
#    You can learn more about setting IAM permissions at
#    https://cloud.google.com/iam/docs/manage-access-other-resources
#
# 3. Change the values in the "env" block to match your values.
name: 'Build and Deploy to Cloud Run'
on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/google-cloudrun-docker-deploy.yml'
  workflow_dispatch:

env:
  PROJECT_ID: 'cs122-457618' # TODO: update to your Google Cloud project ID
  REGION: 'us-west1' # TODO: update to your region
  SERVICE: 'dynasty-mommy' # TODO: update to your service name
  WORKLOAD_IDENTITY_PROVIDER: 'projects/775797418596/locations/global/workloadIdentityPools/github/providers/my-repo' # TODO: update to your workload identity provider
jobs:
  deploy:
    runs-on: 'ubuntu-latest'
    environment: ENV
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332' # actions/checkout@v4
      # Configure Workload Identity Federation and generate an access token.
      #
      # See https://github.com/google-github-actions/auth for more options,
      # including authenticating via a JSON credentials file.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@f112390a2df9932162083945e46d439060d66ec2' # google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ env.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: 'github-actions@cs122-457618.iam.gserviceaccount.com'
          project_id: '${{ env.PROJECT_ID }}'

      # BEGIN - Docker auth and build
      #
      # If you already have a container image, you can omit these steps.
      - name: 'Configure Docker for Artifact Registry'
        run: |-
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet
      - name: 'Build and Push Container'
        run: |-
          DOCKER_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}"
          docker build --tag "${DOCKER_TAG}" backend/
          docker push "${DOCKER_TAG}"
      - name: 'Deploy to Cloud Run'
        # END - Docker auth and build
        uses: 'google-github-actions/deploy-cloudrun@33553064113a37d688aa6937bacbdc481580be17' # google-github-actions/deploy-cloudrun@v2
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          # NOTE: If using a pre-built image, update the image name below:
          image: '${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}:${{ github.sha }}'
          env_vars: |
            DB_URI=${{secrets.DB_URI}}
            DB_URL=${{secrets.DB_URL}}
            YAHOO_CONSUMER_KEY=${{secrets.YAHOO_CONSUMER_KEY}}
            YAHOO_CONSUMER_SECRET=${{secrets.YAHOO_CONSUMER_SECRET}}
            YAHOO_STATE_SECRET=${{secrets.YAHOO_STATE_SECRET}}
            YAHOO_REDIRECT_URI=${{secrets.YAHOO_REDIRECT_URI}}
            SECRET_KEY=${{secrets.SECRET_KEY}}
            NODE_ENV=production
      - name: 'Delete old Docker images (keep latest 5)'
        run: |-
          IMAGE_PATH="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/${{ env.SERVICE }}"
          echo "Fetching image digests from $IMAGE_PATH"

          IMAGES=$(gcloud artifacts docker images list "$IMAGE_PATH" \
            --sort-by=~CREATE_TIME \
            --format="value(version)" | grep -v "${{ github.sha }}")

          # Keep the 5 most recent (excluding current SHA)
          OLD_IMAGES=$(echo "$IMAGES" | tail -n +6)

          echo "Deleting old images..."
          for version in $OLD_IMAGES; do
            echo "Deleting: $version"
            gcloud artifacts docker images delete "$IMAGE_PATH@$version" --quiet --delete-tags
          done
      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-
          echo ${{ steps.deploy.outputs.url }}